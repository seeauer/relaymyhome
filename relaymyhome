#!/usr/bin/env bash

# The MIT License (MIT)
#
# Copyright (c) 2013-2014 Rob Zimmerman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# RelayMyHome -- v. 1.1
# Original script by Rob Zimmerman (https://www.github.com/taintedzodiac)
# See other generous contributors, plus view the source, readme, and license at https://github.com/taintedzodiac/relaymyhome
# Tested in OS X 10.8 (Mountain Lion) and Mavericks

### The time we will pause on each MAC address
relay_time="90"
sleep_time="10"

wservice=$(/usr/sbin/networksetup -listallnetworkservices | grep -Ei '(wi-fi|airport)')
wifi=$(networksetup -listallhardwareports | awk "/${wservice}/,/Ethernet/"' getline { print $2 }')

WirelessMAC=$(networksetup -getmacaddress "${wifi}" | awk '{print $3}')
echo "Original MAC address is: $WirelessMAC"

function notify {
    if [ -z "${speak}" ] ; then
        echo "${@}" ;
    else
        say --interactive=green "${@}" ;
    fi
    return 0
}

function cleanup {
    sudo ifconfig "${wifi}" lladdr "${WirelessMAC}"
    networksetup -setairportpower "${wifi}" off
    networksetup -setairportpower "${wifi}" on

    echo "Cycling of Relays has completed, MAC address reverted."
    notify "Time to check your street passes!"
    return 0
}

function ctrl_c {
    # user quit midway through, so we should revert
    # the MAC address by calling our cleanup function
    echo "*** Interrupted ***"
    cleanup
    exit $?
}

function usage {
    echo "$0 [ full | quick | file filename] [-s] [-h]" 
    echo "full: will seed 5 randomly selected addresses from the full list"
    echo "quick: will seed 2 randomly selected addresses from the full list"
    echo "file filename: will seed all the mac address from the file filename. Please write one address per line"
    echo "no option: will seed all the five Nintendo World relays and the sixteen Homepass relays. "
    echo "-s: audibly speak when the script is done"
    echo "-h: show this help"
    echo 
}

##function that will generate a list of mac addresses, generated automatically based
## on the octets for the current list. This will return the complete list, so callers
## can use either all of it, or only a portion of it
function generateFullMacAddressList {
    # Create an array for the last octet of the mac address, limited range.
    fullList=($(for X in {0..159} ; do echo ${X} | awk '{printf "%s%02X ", "4E:53:50:4F:4F:", $1}'; done ;))
    echo "${fullList[@]}"
}


## Function that will receive a MAC address
## and spoof it over the current WIFI interface on the Mac
function spooofMacAddress {
    echo "Cycling WiFi..."
    sudo ifconfig "${wifi}" lladdr $1
    networksetup -setairportpower "${wifi}" off
    sleep ${sleep_time}
    networksetup -setairportpower "${wifi}" on
    sleep ${relay_time}
}

function generateNintendoWorldAndHomePasses {

    addresses[0]='00:0D:67:15:2D:82'
    addresses[1]='00:0D:67:15:D7:21'
    addresses[2]='00:0D:67:15:D5:44'
    addresses[3]='00:0D:67:15:D2:59'
    addresses[4]='00:0D:67:15:D6:FD'
    addresses[5]='4E:53:50:4F:4F:40'
    addresses[6]='4E:53:50:4F:4F:41'
    addresses[7]='4E:53:50:4F:4F:42'
    addresses[8]='4E:53:50:4F:4F:43'
    addresses[9]='4E:53:50:4F:4F:44'
    addresses[10]='4E:53:50:4F:4F:45'
    addresses[11]='4E:53:50:4F:4F:46'
    addresses[12]='4E:53:50:4F:4F:47'
    addresses[13]='4E:53:50:4F:4F:48'
    addresses[14]='4E:53:50:4F:4F:49'
    addresses[15]='4E:53:50:4F:4F:4A'
    addresses[16]='4E:53:50:4F:4F:4B'
    addresses[17]='4E:53:50:4F:4F:4C'
    addresses[18]='4E:53:50:4F:4F:4D'
    addresses[19]='4E:53:50:4F:4F:4E'
    addresses[20]='4E:53:50:4F:4F:4F'

    echo $addresses
}

# trap keyboard interrupt (control-c) or unexpected quit
trap ctrl_c SIGINT SIGTERM

while getopts hsc: option
do
    case "${option}" in
        h) usage ; exit ;;
        s) speak=1 ;;
        *) usage ; exit 1 ;
    esac
done

shift $((OPTIND - 1))

### TODO:
### * Parse other cli options for verbosity and say vs silent
### * Put the list of MACs into a sqlite3 db and query only oldest visited ones?

case "$1" in
    # Generate a full list of 160 MACs when "full" mode is specified
    # To use full mode: ./relaymyhome full
    # Check the repo at github for more information.
    "full" | "quick" )
        
        addresses=(`generateFullMacAddressList`)
        num=0

        case "$1" in
            "full" )
                num=5
                echo "Full Mode enabled. Randomly seeding five addresses from full list of ${#addresses[@]}."
                ;;
            "quick" )
                num=2
                echo "Quick Mode enabled. Randomly seeding ${num} addresses from full list of ${#addresses[@]}."
        esac

        for ((a=1; a<=num; a++));
        do
            selectedAddr=${addresses[$RANDOM % ${#addresses[@]} ]}
            echo "Spoofing ${wifi} to ${selectedAddr} for ${relay_time} seconds ($a of $num)"
            spooofMacAddress $selectedAddr
        done  
        cleanup
        ;;

    ## Generate a list of mac addresses from a file. Every line must contain only one mac address at a time
    ## any invalid line will be discarted from the current execution.

    "file" ) 
            #we must read from a file. The file must be specified on the next argument, and exist, for this to work
        if [[ -z "$2" ]]; then
            #the variable is not set, show the usage
            usage
            exit 1
        fi

        if [[ -f $2 && -s $2 ]]; then
            currentIndex=0
            macAddresses=()
            #read the file. We need to save every address to the address array, if the address is a valid MAC
            while read line; do
                #check if the line is a MAC Address. if so, add it to the current array
                if [[ "$line" =~ ^([a-fA-F0-9]{2}:){5}[a-fA-F0-9]{2}$ ]]; then
                    #The line is a valid mac address, so we can add if
                    echo "Addding line ${line} to Spoofing list"
                    macAddresses[$currentIndex]=$line
                    currentIndex=$((currentIndex+1))
                else
                    #no line, skipping
                    echo "Invalid line '${line}', skipping"
                fi
            done < $2

            n=1
            #file read, start start the spoofing
            for a in "${macAddresses[@]}"
            do
                echo "Spoofing ${wifi} to $a for 90 seconds ($n of $currentIndex)"
                spooofMacAddress $a
                n=$((n+1))
            done
            cleanup
        else
            echo "File $2 does not exists, or is empty"
            # as we did not use the function to change the mac address, no cleanup is needed.
            #exit with error
            exit 1
        fi   ;;
    
    # This set of MACs will be used in standard mode
    # Taken from: https://docs.google.com/spreadsheet/ccc?key=0AvvH5W4E2lIwdEFCUkxrM085ZGp0UkZlenp6SkJablE#gid=0
    # Usage: ./relaymyhome
    "" )
        
        currentAddresses=$(generateNintendoWorldAndHomePasses)

        echo "Standard Mode enabled. Connecting to the five Nintendo World relays and the sixteen Homepass relays."
        n=1

        for currentAddress in "${currentAddresses[@]}"
        do
            echo "Spoofing ${wifi} to $currentAddress for ${relay_time} seconds ($n of 21)"
            spooofMacAddress $currentAddress
            n=$((n+1))
  
        done
        cleanup
        ;;
    * )
        usage ;;
esac
